document.addEventListener("DOMContentLoaded", (e) => {
  window.innerWidth >= 1030 &&
    {
      delay: 12,
      _x: 0,
      _y: 0,
      endX: window.innerWidth / 2,
      endY: window.innerHeight / 2,
      cursorVisible: !0,
      cursorEnlarged: !1,
      $dot: document.querySelector(".cursor-dot"),
      $outline: document.querySelector(".cursor-dot-outline"),
      init: function () {
        (this.dotSize = this.$dot.offsetWidth),
          (this.outlineSize = this.$outline.offsetWidth),
          this.setupEventListeners(),
          this.animateDotOutline();
      },
      setupEventListeners: function () {
        var e = this;
        document.querySelectorAll("a").forEach(function (t) {
          t.addEventListener("mouseover", function () {
            (e.cursorEnlarged = !0), e.toggleCursorSize();
          }),
            t.addEventListener("mouseout", function () {
              (e.cursorEnlarged = !1), e.toggleCursorSize();
            });
        }),
          document.addEventListener("mousedown", function () {
            (e.cursorEnlarged = !0), e.toggleCursorSize();
          }),
          document.addEventListener("mouseup", function () {
            (e.cursorEnlarged = !1), e.toggleCursorSize();
          }),
          document.addEventListener("mousemove", function (t) {
            (e.cursorVisible = !0),
              e.toggleCursorVisibility(),
              (e.endX = t.pageX),
              (e.endY = t.pageY),
              (e.$dot.style.top = e.endY + "px"),
              (e.$dot.style.left = e.endX + "px");
          }),
          document.addEventListener("mouseenter", function (t) {
            (e.cursorVisible = !0),
              e.toggleCursorVisibility(),
              (e.$dot.style.opacity = 1),
              (e.$outline.style.opacity = 1);
          }),
          document.addEventListener("mouseleave", function (t) {
            (e.cursorVisible = !0),
              e.toggleCursorVisibility(),
              (e.$dot.style.opacity = 0),
              (e.$outline.style.opacity = 0);
          });
      },
      animateDotOutline: function () {
        (this._x += (this.endX - this._x) / this.delay),
          (this._y += (this.endY - this._y) / this.delay),
          (this.$outline.style.top = this._y + "px"),
          (this.$outline.style.left = this._x + "px"),
          requestAnimationFrame(this.animateDotOutline.bind(this));
      },
      toggleCursorSize: function () {
        this.cursorEnlarged
          ? ((this.$dot.style.transform = "translate(-50%, -50%) scale(0.75)"),
            (this.$outline.style.transform =
              "translate(-50%, -50%) scale(1.5)"))
          : ((this.$dot.style.transform = "translate(-50%, -50%) scale(1)"),
            (this.$outline.style.transform = "translate(-50%, -50%) scale(1)"));
      },
      toggleCursorVisibility: function () {
        this.cursorVisible
          ? ((this.$dot.style.opacity = 1), (this.$outline.style.opacity = 1))
          : ((this.$dot.style.opacity = 0), (this.$outline.style.opacity = 0));
      },
    }.init()
  console.clear();

  // function checkInputs(params) {
  //   const inputs = document.querySelectorAll(".logIn__input__items").forEach(item => {
  //     item.addEventListener('input', (e) => {
  //       const min = 0,
  //             max = 21,
  //             inputVal = e.target.value
        
  //       if(inputVal => min && inputVal <= max) {
          
  //       }
  //     })
  //   });
  // }
  // checkInputs()


  // ADD dialog accordion

  const dialogItem = document.getElementsByClassName("dialogItem");
  const diaHD = document.getElementsByClassName("dialogItemHeading");
  
  function fullScroll(params) {
    const dialog = document.querySelectorAll(".dialogItemContent__dialog");
    dialog.forEach((item) => {
      item.scrollTop = item.scrollHeight;
    });

  }

  fullScroll();

  const attachBTN = document.querySelectorAll(
    ".dialogItemContent__appendInput"
  );
  const attachHiddenMenu = document.querySelectorAll(".hiddenAttachMenu");
  const attachHiddenMenuBTN = document.querySelectorAll(
    ".hiddenAttachMenu__btn"
  );

  const modalAttachMenu = document.querySelector(".modalAttachMenu");
  attachBTN.forEach((item, index) => item.addEventListener('click', (e) => {
    attachHiddenMenu[index].classList.toggle('visible');
  }));

  for (let i = 0; i < attachHiddenMenuBTN.length; i++) {
    const item = attachHiddenMenuBTN[i];

    item.addEventListener('click', (e) => {
      modalAttachMenu.classList.toggle("hide");
      
      const modalSelect = document.querySelector("#modalSelect");
      modalSelect[i].selected = "selected";
    })
    
  }
  function toggleItem() {
    let itemClass = this.parentNode.className;
    for (i = 0; i < dialogItem.length; i++) {
      dialogItem[i].className = "dialogItem close";
    }
    
    if (itemClass == "dialogItem close") {
      this.parentNode.className = "dialogItem open";
      fullScroll();
    }
    
  }
  for (i = 0; i < diaHD.length; i++) {
    diaHD[i].addEventListener("click", toggleItem, false);

  }


  
  // Accordion SIDEBAR MENU

  const menuItem = document.querySelectorAll(".sidebarListItem"),
    contentItem = document.querySelectorAll(".contentWrapperItem");

  for (let i = 0; i < menuItem.length; i++) {
    menuItem[i].addEventListener("click", (e) => {
      contentItem.forEach(item => item.classList.add('hide'))
      contentItem[i].classList.remove('hide')
    });
  };

  
  const modalArrowBTN = document.querySelector(".modal__arrow");
  modalArrowBTN.addEventListener('click', (e) => {
    modalAttachMenu.classList.toggle('hide')
  })

  modalAttachMenu.addEventListener("click", (e) => {
    if (e.target.classList.contains("modalAttachMenu")) {
      modalAttachMenu.classList.toggle("hide");
    }
  });

});


